version: "3.9"

services:
  app:
    container_name: proxy_server_app
    restart: always
    build:
      context: .
    volumes:
      - ./app:/app
      - static-data:/vol/web
      - /pipes:/hostpipe
    environment:
      - DB_HOST=db
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASS=${DB_PASS}
      - SECRET_KEY=${DJANGO_SECRET_KEY}
      - ALLOWED_HOSTS=${DJANGO_ALLOWED_HOSTS}
      - API_HOST=${API_HOST}
    depends_on:
      - db

    networks:
      project_network:
        ipv4_address: 192.168.55.10

  db:
    container_name: proxy_server_postgresdb
    image: postgres:13-alpine
    restart: always
    volumes:
      - postgres-data:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASS}
    networks:
      project_network:

  pgadmin:
    container_name: proxy_server_pgadmin4_container
    image: dpage/pgadmin4
    restart: always
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD}
    ports:
      - "5050:80"
    networks:
      project_network:

  frontend:
    image: proxy_server_docker-nextjs
    container_name: nextjs-app

    build:
      context: ./frontend/
      dockerfile: Dockerfile.production
    ports:
      - 3000:3000
    depends_on:
      - app
    environment:
      - JWT_SECRET=${JWT_SECRET}



    networks:
      project_network:
        ipv4_address: 192.168.55.11

  proxy:
    build:
      context: ./proxy
    restart: always
    depends_on:
      - app
    ports:
      - 8000:8000
    volumes:
      - static-data:/vol/static
    networks:
      project_network:
    
networks:
  project_network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 192.168.55.0/24
          gateway: 192.168.55.1

volumes:
  postgres-data:
  static-data:
